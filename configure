#!/bin/bash

#  Copyright (c) 2011, Julien Verlaguet
#  All rights reserved.
#  
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are
#  met:
#  1. Redistributions of source code must retain the above copyright
#  notice, this list of conditions and the following disclaimer.
#  
#  2. Redistributions in binary form must reproduce the above copyright
#  notice, this list of conditions and the following disclaimer in the
#  documentation and/or other materials provided with the
#  distribution.
#  
#  3. Neither the name of Julien Verlaguet nor the names of
#  contributors may be used to endorse or promote products derived
#  from this software without specific prior written permission.
#  
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

cpp=""
cc=""
ocamlc=""
ocamlopt=""
ocamldep=""
llc=""
llbindings=""

llvm_cma=""
analysis_cma=""
bitwriter_cma=""
llvm_scalar_opts_cma=""
llvm_target_cma=""

stdlibdir=""
bindir=""
libdir=""

echo "**************************"
echo "*  Configuring linearML  *"
echo "**************************"
echo ""

while [ $# -gt 0 ]
do
  case "$1" in
    "") break;;

    --cpp) 
	  cpp=$2	; shift ;;
    --cc) 
	  cc=$2		; shift ;;
    --ocamlc) 
	  ocamlc=$2	; shift ;;
    --ocamlopt) 
	  ocamlopt=$2	; shift ;;
    --ocamldep) 
	  ocamldep=$2	; shift ;;
    --stdlibdir) 
	  stdlibdir=$2	; shift ;;
    --bindir) 
	  bindir=$	; shift ;;
    --libdir) 
	  libdir=$2	; shift ;;
    --llc)
	  llc=$2	; shift ;;
    --llbindings)
	  llbindings=$2 ; shift ;;

    *) echo "Unkown option: \"$1\"" 2>&1 ; exit 2 ;;
  esac;
  shift
done

if test -z "$cc"; then
    cc=`which gcc`;
    if test -z "$cc"; then
	echo "Couldn't find a C compiler please use --cc"; 
	exit 2
    fi
    echo -e "Found cc\t: $cc"
fi

if test -z "$cpp"; then
    cpp=`which g++`;
    if test -z "$cpp"; then
	echo "Couldn't find a C++ compiler please use --cpp"; 
	exit 2
    fi
    echo -e "Found cpp\t: $cpp"
fi

if test -z "$ocamlc"; then
    ocamlc=`which ocamlc.opt`;
    if test -z "$ocamlc"; then
	ocamlc=`which ocamlc`;
	if test -z "$ocamlc"; then
	    echo "Couldn't find ocamlc compiler please use --ocamlc"; 
	    exit 2
	fi
    fi
    echo -e "Found ocamlc\t: $ocamlc"
fi

if test -z "$ocamlopt"; then
    ocamlopt=`which ocamlopt.opt`;
    if test -z "$ocamlopt"; then
	ocamlopt=`which ocamlopt`;
	if test -z "$ocamlopt"; then
	    echo "Couldn't find ocamlopt please use --ocamlopt"; 
	    exit 2
	fi
    fi
    echo -e "Found ocamlopt\t: $ocamlopt"
fi

if test -z "$ocamldep"; then
    ocamldep=`which ocamldep`;
    if test -z "$ocamldep"; then
	echo "Couldn't find ocamldep please use --ocamldep" ; exit 2
    fi
    echo -e "Found ocamldep\t: $ocamldep -e"
fi

if test -z "$llc"; then
    llc=`which llc-2.8`;
    if test -z "$llc"; then
	llc=`which llc`;
	if test -z "$llc"; then
	    echo "Couldn't find a llc (llvm compiler) please use --llc"; 
	    exit 2
	fi
    fi
    echo -e "Found llc\t: $llc"
fi

if test -z "$llbindings"; then
    llvm_cma=`locate llvm.cma`

    llbindings=`dirname $llvm_cma`
    if test -z "$llbindings"; then
	llbindings="/usr/lib/ocaml/llvm-2.8"
    fi
    if test -z "$llbindings"; then
	llbindings="/usr/lib/ocaml/llvm"
    fi
    if test -z "$llbindings"; then
	llbindings="/usr/local/lib/ocaml/llvm"
    fi
    if test -z "$llbindings"; then
	llbindings="/usr/share/lib/ocaml/llvm"
    fi
    if test -z "$llbindings"; then
	echo "Could not find ocaml bindings for llvm" ;
	exit 2
    fi
    echo -e "Found bindings\t: $llbindings"

    llvm_cma="$llbindings/llvm.cma"
    llvm_cma_base="llvm"
    if test -z "$llvm_cma"; then
	echo "Cound not find llvm.cma" ;
	exit 2
    else echo -e "Found $llvm_cma_base\t: $llvm_cma"
    fi

    analysis_cma="$llbindings/llvm_analysis.cma"
    analysis_cma_base="analysis"
    if test -z "$analysis_cma"; then
	echo "Cound not find analysis.cma" ;
	exit 2
    else echo -e "Found $analysis_cma_base\t: $analysis_cma"
    fi

    bitwriter_cma="$llbindings/llvm_bitwriter.cma"
    bitwriter_cma_base="bitwriter"
    if test -z "$bitwriter_cma"; then
	echo "Cound not find bitwriter.cma" ;
	exit 2
    else echo -e "Found $bitwriter_cma_base\t: $bitwriter_cma"
    fi

    llvm_scalar_opts_cma="$llbindings/llvm_scalar_opts.cma"
    llvm_scalar_opts_cma_base="sopts"
    if test -z "$llvm_scalar_opts_cma"; then
	echo "Cound not find llvm_scalar_opts.cma" ;
	exit 2
    else echo -e "Found $llvm_scalar_opts_cma_base\t: $llvm_scalar_opts_cma"
    fi

    llvm_target_cma="$llbindings/llvm_target.cma"
    llvm_target_cma_base="target"
    if test -z "$llvm_target_cma"; then
	echo "Cound not find llvm_target.cma" ;
	exit 2
    else echo -e "Found $llvm_target_cma_base\t: $llvm_target_cma"
    fi
fi

echo ""

llc_version=`$llc -version | grep version` ;
if [[ "$llc_version" =~ .*version.2.8.* ]]; then
    echo -e "Checking llc     \t: OK$llc_version"
else 
    echo "Bad version of llc (expected version 2.8): $version" 2>&1;
    exit 2
fi

ocamlc_version=`$ocamlc -version` ;
if [[ "$ocamlc_version" =~ 3.1[^0].* ]]; then
    echo -e "Checking ocamlc  \t: OK $ocamlc_version"
else 
    echo "Bad version of ocamlc (< 3.11): $version" 2>&1;
    exit 2
fi

ocamlopt_version=`$ocamlopt -version` ;
if [[ "$ocamlopt_version" =~ 3.1[^0].* ]]; then
    echo -e "Checking ocamlopt\t: OK $ocamlopt_version"
else 
    echo "Bad version of ocamlopt (< 3.11): $version" 2>&1;
    exit 2
fi

ocamldep_version=`$ocamldep -version` ;
if [[ "$ocamldep_version" =~ 3.1[^0].* ]]; then
    echo -e "Checking ocamldep\t: OK $ocamldep_version"
else 
    echo "Bad version of ocamldep (< 3.11): $version" 2>&1;
    exit 2
fi

echo ""

gcc conf/size.c -o conf/get_size
march=`conf/get_size`
rm conf/get_size
if [[ "$march" == "ARCH_32" ]]; then
    echo -e "Architecture\t: 32 bits"
else if [[ "$march" == "ARCH_64" ]]; then
    echo -e "Architecture\t: 64 bits"
else echo "Unknown architecture!" ; exit 2 
fi
fi
