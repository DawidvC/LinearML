module Array = struct
  type 'a t

  val init_: int * ('a * int #-> 'b) * 'a #-> 'b t = "liml_array_make"
  val private fmake_: int * float #-> float t = "liml_array_ifmake"
  val private imake_: int * int #-> int t = "liml_array_ifmake"
  val set: 'a t * int * 'a -> 'a t = internal
  val get: 'a t obs * int -> 'a = internal
  val swap: 'a t * int * 'a -> 'a t * 'a = internal

  val private length_: 'a t obs #-> int = "liml_array_length"
  val private release_: ('a * 'b #-> unit) * 'a * 'b t #-> unit = "liml_array_release"
  val private irelease_: int t #-> unit = "liml_array_ifrelease"
  val private frelease_: float t #-> unit = "liml_array_ifrelease"

  val call_int: ('b -> 'a) * 'b #-> 'a
  let call_int f i = f i

  val call_unit: ('a -> unit) * 'a #-> unit
  let call_unit f i = f i

  val init: int * (int -> 'a) -> 'a t
  let init n f = init_ n call_int f

  val fmake: int * float -> float t
  let fmake size f = fmake_ size f

  val imake: int * int -> int t
  let imake size f = imake_ size f

  val length: 'a t obs -> int
  let length t = length_ t

  val release: ('a -> unit) * 'a t -> unit
  let release f t = 
    release_ call_unit f t

  val irelease: int t -> unit 
  let irelease t = irelease_ t 

  val frelease: float t -> unit
  let frelease t = frelease_ t
    
  val debug: 'a obs #-> unit = "debug"
end


