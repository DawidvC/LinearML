
module Box:sig

  type bbool = { v: bool }
  type bchar = { v: char }

  type bint8 = { v: int8 }
  type bint16 = { v: int16 }
  type bint32 = { v: int32 }
  type bint64 = { v: int64 }

  type buint8 = { v: uint8 }
  type buint16 = { v: uint16 }
  type buint32 = { v: uint32 }
  type buint64 = { v: uint64 }

  type bfloat = { v: float }
  type bdouble = { v: double }

  val make_bool: bool -> bbool
  val make_char: char -> bchar

  val make_int8: int8 -> bint8
  val make_int16: int16 -> bint16
  val make_int32: int32 -> bint32
  val make_int64: int64 -> bint64

  val make_uint8: uint8 -> buint8
  val make_uint16: uint16 -> buint16
  val make_uint32: uint32 -> buint32
  val make_uint64: uint64 -> buint64

  val make_float: float -> bfloat
  val make_double: double -> bdouble

  val get_bool: bbool -> bool
  val get_char: bchar -> char

  val get_int8: bint8 -> int8
  val get_int16: bint16 -> int16
  val get_int32: bint32 -> int32
  val get_int64: bint64 -> int64

  val get_uint8: buint8 -> uint8
  val get_uint16: buint16 -> uint16
  val get_uint32: buint32 -> uint32
  val get_uint64: buint64 -> uint64

  val get_float: bfloat -> float
  val get_double: bdouble -> double

end = struct

  let make(x) = { v = x }
  let get(t) = t.v

  let make_bool = make
  let make_char = make

  let make_int8 = make
  let make_int16 = make
  let make_int32 = make
  let make_int64 = make

  let make_uint8 = make
  let make_uint16 = make
  let make_uint32 = make
  let make_uint64 = make

  let make_float = make
  let make_double = make

  let get_bool = get
  let get_char = get

  let get_int8 = get
  let get_int16 = get
  let get_int32 = get
  let get_int64 = get

  let get_uint8 = get
  let get_uint16 = get
  let get_uint32 = get
  let get_uint64 = get

  let get_float = get
  let get_double = get
end
