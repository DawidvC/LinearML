module List = struct

  type 'a t = 
    | Empty
    | Cons of 'a * 'a t

  val rev_append: 'a t * 'a t -> 'a t
  let rev_append acc l = 
    match l with
    | [] -> acc
    | x :: rl -> rev_append (x :: acc) rl

  val rev: 'a t -> 'a t
  let rev l = rev_append [] l

  val append: 'b t * 'b t -> 'b t
  let append l1 l2 = 
    match l1 with
    | [] -> l2
    | x :: rl -> x :: append rl l2

  val flatten: 'a t t -> 'a t
  let flatten l = 
    match l with
    | [] -> []
    | x :: rl -> append x (flatten rl)

  val map: ('a -> 'b) * 'a t -> 'b t
  let map f l = 
    match l with
    | [] -> []
    | x :: rl -> f x :: map f rl

  val map_acc: ('a * 'b -> 'a * 'c) * 'a * 'b t -> 'a * 'c t
  let map_acc f acc l = 
    match l with
    | [] -> acc, []
    | x :: rl -> 
	let acc, x = f acc x in
	let acc, rl = map_acc f acc rl in
	acc, x :: rl

  val fold_left: ('a * 'b -> 'a) * 'a * 'b t -> 'a
  let fold_left f acc l = 
    match l with
    | [] -> acc
    | x :: rl ->
	let acc = f acc x in
	fold_left f acc rl

  val fold_right: ('a * 'b -> 'b) * 'a t * 'b -> 'b
  let fold_right f l acc = 
    match l with
    | [] -> acc
    | x :: rl -> fold_right f rl (f x acc)

  val release: ('a -> unit) * 'a t -> unit
  let release f l = 
    match l with
    | [] -> ()
    | x :: rl -> f x ; release f rl
end

