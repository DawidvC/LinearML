(* Implementation of an Avl tree *)
(* To run this: ../../compiler/limlc -eval -root Test map.lml *)

module Map = struct

  type error =
    | Bal_invalid_arg
    | Not_found
    | Remove_min_elt

  type ('a, 'b) t =
    | Empty
    | Node of ('a, 'b) t * 'a * 'b * ('a, 'b) t * int

  type ('a, 'b) env = {
      cmp: (('a obs * 'a obs) -> int);
      kdefault: 'a;
      vdefault: 'b;
      kcopy: ('a obs -> 'a);
      vcopy: ('b obs -> 'b);
      kfree: ('a -> unit);
      vfree: ('b -> unit);
      fnode: ('a, 'b) t List.t;
      fkey: 'a List.t;
      fval: 'b List.t;
      error: error List.t;
    }

  val init:
      (('a obs * 'a obs) -> int) *
      'a *
      'b *
      ('a obs -> 'a) *
      ('b obs -> 'b) *
      ('a -> unit) *
      ('b -> unit)
    -> ('a, 'b) env
  let init cmp kdef vdef kcpy vcpy fk fv =
    { cmp = cmp;
      kdefault = kdef;
      vdefault = vdef;
      kcopy = kcpy;
      vcopy = vcpy;
      kfree = fk;
      vfree = fv;
      fnode = [];
      fkey = [];
      fval = [];
      error = [];
    }

  val free_t: ('a -> unit) obs * ('b -> unit) obs * ('a, 'b) t -> unit
  let free_t fk fv t = 
    match t with
    | Empty -> ()
    | Node (l, k, v, r, _) ->
	free_t fk fv l;
	fk k;
	fv v;
	free_t fk fv r

  val free_tlist: ('a -> unit) obs * ('b -> unit) obs * ('a, 'b) t List.t -> unit
  let free_tlist fk fv l = 
    match l with
    | [] -> ()
    | x :: rl -> free_t fk fv x; free_tlist fk fv rl

  val free_list: ('a -> unit) obs * 'a List.t -> unit
  let free_list f l =
    match l with
    | [] -> ()
    | x :: rl -> f x; free_list f rl

  val free_env: ('a, 'b) env -> error List.t
  let free_env env =
    let { env;
	  ~kdefault;
	  ~vdefault;
	  ~fnode;
	  ~fkey;
	  ~fval;
	  ~error;
	} = env in
    env.kfree kdefault;
    env.vfree vdefault;
    free_tlist env.kfree env.vfree fnode;
    free_list env.kfree fkey;
    free_list env.vfree fval;
    free env;
    error
	
  val private kdef: ('a, 'b) env obs -> 'a
  let kdef env =
    env.kcopy (env.kdefault)

  val private vdef: ('a, 'b) env obs -> 'a
  let vdef env =
    env.vcopy (env.vdefault)

  val private error: ('a, 'b) env * error -> ('a, 'b) env
  let error env err =
    let { env; ~error } = env in
    env.error <- err :: error;
    env

  val private dnode: ('a, 'b) env * ('a, 'b) t -> ('a, 'b) env
  let dnode env n =
    let { env; ~fnode } = env in
    env.fnode <- n :: fnode;
    env

  val private dval: ('a, 'b) env * 'a -> ('a, 'b) env
  let dval env v =
    let { env; ~fval} = env in
    env.fval <- v :: fval;
    env

  val private dkey: ('a, 'b) env * 'a -> ('a, 'b) env
  let dkey env k =
    let { env; ~fkey} = env in
    env.fkey <- k :: fkey;
    env

  val private height: ('a, 'b) t obs -> int
  let height t =
    match t with
    | Empty -> 0
    | Node _ _ _ _ h -> h

  val private node: ('a, 'b) env * ('a, 'b) t * 'a * 'b * ('a, 'b) t -> ('a, 'b) env * ('a, 'b) t
  let node env l k v r =
    let { env; ~fnode } = env in
    hl := height(!l);
    hr := height(!r);
    match fnode with
    | [] -> 
	let env = { env with fnode = [] } in
	env, Node(l, k, v, r, (if hl >= hr then hl + 1 else hr + 1))
    | Empty :: fnode ->
	let env = { env with fnode = fnode } in
	env, Node(l, k, v, r, (if hl >= hr then hl + 1 else hr + 1))
    | (Node (l2, k2, v2, r2, _)) :: fnode ->
	let env = { env with fnode = fnode } in
	let env = dkey env k2 in
	let env = dval env v2 in
	let env = dnode env l2 in
	let env = dnode env r2 in
	env, Node(l, k, v, r, (if hl >= hr then hl + 1 else hr + 1))

  val private balance: 
      ('a, 'b) env * ('a, 'b) t * 'a * 'b * ('a, 'b) t 
    -> ('a, 'b) env * ('a, 'b) t
  let balance env l k v r =
    hl := height(!l);
    hr := height(!r);
    d  := hl - hr;
    if d > 2
    then
      match l with
      | Empty ->
          (* Should never happend *)
          env := error env Bal_invalid_arg;
          env := dkey env k;
          env := dval env v;
          env := dnode env r;
          env, Empty
      | Node(ll, lv, ld, lr, _) ->
          if height !ll >= height !lr then
	    let env, lr = node env lr k v r in
            node env ll lv ld lr
          else
            match lr with
              Empty ->
                (* Should never happend *)
                env := error env Bal_invalid_arg;
                env := dkey env k;
                env := dval env v;
                env := dnode env r;
                env := dnode env ll;
                env := dval env lv;
                env := dkey env ld;
                env, Empty
            | Node(lrl, lrv, lrd, lrr, _)->
		let env, lrl = node env ll lv ld lrl in
		let env, lrr = node env lrr k v r in
                node env lrl lrv lrd lrr
    else if d < -2 then
      match r with
      | Empty ->
          (* Should never happend *)
          env := error env Bal_invalid_arg;
          env := dnode env l;
          env := dkey env k;
          env := dval env v;
          env, Empty
      | Node(rl, rv, rd, rr, _) ->
          if height !rr >= height !rl then
	    let env, rl = node env l k v rl in
            node env rl rv rd rr
          else
            match rl with
            | Empty ->
                (* Should never happend *)
                env := error env Bal_invalid_arg;
                env := dnode env l;
                env := dnode env rr;
                env := dkey env k;
                env := dval env v;
                env := dkey env rv;
                env := dval env rd;
                env, Empty
            | Node(rll, rlv, rld, rlr, _) ->
		let env, rll = node env l k v rll in
		let env, rlr = node env rlr rv rd rr in
                node env rll rlv rld rlr
    else
      env, Node(l, k, v, r, (if hl >= hr then hl + 1 else hr + 1))

  val empty: unit -> ('a, 'b) t
  let empty() = Empty

  val is_empty: ('a, 'b) t obs -> bool
  let is_empty x =
    match x with
    | Empty -> true
    | _ -> false

  val add: ('a, 'b) env * 'a * 'b * ('a, 'b) t -> ('a, 'b) env * ('a, 'b) t
  let add env x data t =
    match t with
    | Empty ->
        env, Node(Empty, x, data, Empty, 1)
    | Node(l, v, d, r, h) ->
        c := env.cmp !x !v;
        if c = 0 then
          env := dkey env v;
          env := dval env d;
          env, Node(l, x, data, r, h)
        else if c < 0 then
          let env, l = add env x data l in
          balance env l v d r
        else
          let env, r = add env x data r in
          balance env l v d r

  val find: ('a, 'b) env * 'a obs * ('a, 'b) t obs -> ('a, 'b) env * 'b
  let find env x t =
    match t with
    | Empty ->
        env := error env Not_found;
        env, vdef !env
    | Node(l, v, d, r, _) ->
        let c = env.cmp x v in
        if c < 0
        then find env x l
        else if c > 0
        then find env x r
        else env, env.vcopy d

  val mem: ('a, 'b) env obs * 'a obs * ('a, 'b) t obs -> bool
  let rec mem env x t =
    match t with
    | Empty -> false
    | Node(l, v, d, r, _) ->
        c := env.cmp x v;
        c = 0 || mem(env, x, if c < 0 then l else r)

  val min_binding: ('a, 'b) env * ('a, 'b) t obs -> ('a, 'b) env * 'a * 'b
  let min_binding env t =
    match t with
    | Empty ->
        env := error env Not_found;
        env, kdef !env, vdef !env
    | Node(Empty, x, d, r, _) ->
        env, env.kcopy x, env.vcopy d
    | Node(l, x, d, r, _) -> min_binding env l

  val max_binding: ('a, 'b) env * ('a, 'b) t obs -> ('a, 'b) env * 'a * 'b
  let max_binding env t =
    match t with
    | Empty ->
        env := error env Not_found;
        (env, kdef(!env), vdef(!env))
    | Node(l, x, d, Empty, _) ->
        (env, env.kcopy(x), env.vcopy(d))
    | Node(l, x, d, r, _) ->
        max_binding(env, r)

  val remove_min_binding:
      ('a, 'b) env * ('a, 'b) t -> ('a, 'b) env * ('a, 'b) t
  let rec remove_min_binding env t =
    match t with
    | Empty ->
        env := error env Remove_min_elt;
        env, Empty
    | Node(Empty, x, d, r, _) ->
        env := dkey env x;
        env := dval env d;
        env, r
    | Node(l, x, d, r, _) ->
        let env, l = remove_min_binding env l in
        balance env l x d r

  val merge: ('a, 'b) env * ('a, 'b) t * ('a, 'b) t 
    -> ('a, 'b) env * ('a, 'b) t
  let merge env t1 t2 =
    match (t1, t2) with
    | (Empty, t) -> env, t
    | (t, Empty) -> env, t
    | (t1, t2) ->
        let env, x, d = min_binding env !t2 in
        let env, t2 = remove_min_binding env t2 in
        balance env t1 x d t2

  val remove: ('a, 'b) env * 'a obs * ('a, 'b) t
    -> ('a, 'b) env * ('a, 'b) t
  let remove env x t =
    match t with
    | Empty ->
        env, Empty
    | Node(l, v, d, r, h) ->
        let c = env.cmp x !v in
        if c < 0
        then
          let env, l = remove env x l in
          balance env l v d r
        else if c > 0
        then
          let env, r = remove env x r in
          balance env l v d r
        else
          env := dval env v;
          env := dval env d;
          merge env l r

  val fold_left:
       ('acc * 'a obs -> 'acc) obs *
       ('acc * 'b obs -> 'acc) obs *
       'acc *
       ('a, 'b) t obs
    -> 'acc
  let fold_left fk fv acc t =
    match t with
    | Empty -> acc
    | Node(l, k, v, r, _) ->
        acc := fold_left fk fv acc l;
        acc := fk acc k;
        acc := fv acc v;
        acc := fold_left fk fv acc r;
        acc

  val map: ('b -> 'c) obs * ('a, 'b) t -> ('a, 'c) t
  let map f t = 
    match t with
    | Empty -> Empty
    | Node(l, v, d, r, h) ->
        let l = map f l in
        let d = f d in
        let r = map f r in
        Node(l, v, d, r, h)

  val map_acc: 
      ('acc * 'b -> 'acc * 'c) obs * 'acc * ('a, 'b) t 
    -> 'acc * ('a, 'c) t
  let map_acc f acc t = 
    match t with
    | Empty -> acc, Empty
    | Node(l, v, d, r, h) ->
        let acc, l = map_acc f acc l in
        let acc, d = f acc d in
        let acc, r = map_acc f acc r in
        acc, Node(l, v, d, r, h)

end

module ShareMap = struct

  type error =
    | Bal_invalid_arg
    | Not_found
    | Remove_min_elt

  type abstract ('a, 'b) t =
    | Empty
    | Node of 
	('a, 'b) t Share.t
	  * 'a Share.t
	  * 'b Share.t
	  * ('a, 'b) t Share.t 
	  * int

  val make: ('a, 'b) Map.t -> ('a, 'b) t
  let make t = 
    match t with
    | Map.Empty -> Empty
    | Map.Node (l, k, v, r, h) -> 
	let l = Share.make (make l) in
	let k = Share.make k in
	let v = Share.make v in
	let r = Share.make (make r) in
	Node (l, k, v, r, h)

end

module Sum = struct

  type env = {
      menv: (int, int) Map.env;
      mt: (int, int) Map.t Share.t;
      n: int;
      acc: int;
      iter: int;
    }

  val private sum: 
       (int, int) Map.env * (int, int) Map.t obs * int * int
    -> (int, int) Map.env * int
  let sum env t acc i = 
    if i < 0
    then env, acc
    else 
      let env, x = Map.find env i t in
      let acc = acc + x in
      sum env t acc (i-1)

  val loop: env #-> env
  let loop env = 
    if env.iter < 0
    then env
    else 
      let { env; ~acc; ~menv } = env in
      let menv, acc = sum menv (Share.visit env.mt) acc env.n in
      let env = { env with ~acc; ~menv ; iter = env.iter - 1} in
      loop env
end


module Test = struct

  val cmp: int obs * int obs -> int
  let cmp x y = x - y

  val cpy: int obs -> int
  let cpy x = x

  val private make: 
       (int, int) Map.env * (int, int) Map.t * int
    -> (int, int) Map.env * (int, int) Map.t
  let make env acc i = 
    if i < 0
    then env, acc
    else 
      let env, acc = Map.add env i i acc in
      make env acc (i-1)

  val private rmake: 
       (int, int) Map.env * (int, int) Map.t * int
    -> (int, int) Map.env * (int, int) Map.t
  let rmake env acc i = 
    if i < 0
    then env, acc
    else 
      let env, acc = Map.remove env i acc in
      make env acc (i-1)

  val fint: int -> unit
  let fint _ = ()

  val both: (int, int) Map.env * (int, int) Map.t * int * int
      -> (int, int) Map.env * (int, int) Map.t
  let both env t n i = 
    if i < 0
    then env, t
    else
      let env, t = make env t n in
      both env t n (i-1)


  val free_error: Map.error List.t -> unit
  let free_error l = 
    match l with
    | [] -> ()
    | x :: rl -> 
	(match x with
	| Map.Bal_invalid_arg -> 	free_error rl
	| Map.Not_found -> 	free_error rl
	| Map.Remove_min_elt -> 	free_error rl
	)


  val main: unit -> _
  let main() =
    let menv = Map.init cmp 0 0 cpy cpy fint fint in
    let menv, t = make menv (Map.empty()) 1000 in
    let t = Share.make t in
    let lenv1 = { Sum.menv = menv ;
		  Sum.mt = Share.clone !t;
		  Sum.n = 1000;
		  Sum.acc = 0;
		  Sum.iter = 100000; 
	       } in
    let lenv1 = Future.make Sum.loop lenv1 in
    let menv = Map.init cmp 0 0 cpy cpy fint fint in
    let lenv2 = { Sum.menv = menv ;
		  Sum.mt = t;
		  Sum.n = 1000;
		  Sum.acc = 0;
		  Sum.iter = 100000; 
	       } in
    let lenv2 = Future.make Sum.loop lenv2 in    
    let lenv1 = Future.wait lenv1 in
    let lenv2 = Future.wait lenv2 in
    [lenv1; lenv2]
end
