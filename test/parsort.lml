
module TestParsort = struct

  type t = 
    | Empty
    | Cons of int * t

  val rev_append: t * t -> t
  let rev_append l1 l2 = 
    match l1 with
    | Empty -> l2
    | Cons x rl -> rev_append rl (Cons x l2)

  val merge: t * t * t -> t
  let merge acc l1 l2 = 
    match l1, l2 with
    | Empty, l -> rev_append l acc
    | l, Empty -> rev_append l acc
	(* Arghh the as pattern is buggy in linear check ... *)
(*
    | (Cons x1 rl1 as l1), (Cons x2 rl2 as l2) ->
	if x1 > x2
	then merge (Cons x1 acc) rl1 l2
	else merge (Cons x2 acc) l1 rl2 
*)
    | Cons x1 rl1, Cons x2 rl2 ->
	if x1 > x2
	then merge (Cons x1 acc) rl1 (Cons x2 rl2)
	else merge (Cons x2 acc) (Cons x1 rl1) rl2

  val split: int * t * t * t -> int * t * t
  let split n l1 l2 l = 
    match l with
    | Empty -> n, l1, l2
    | Cons x Empty -> n, l1, l2
    | Cons x (Cons y rl) -> split (n+1) (Cons x l1) (Cons y l2) rl

  val sort: t -> t
  let sort l = 
    match l with
    | Empty -> Empty
    | Cons _ Empty as l -> l
    | Cons x rl as l -> 
	let length1, l1, l2 = split 0 Empty Empty l in
	if length1 > 100000
	then 
	  let l1 = Future.make c_sort l1 in
	  let l2 = Future.make c_sort l2 in
	  merge Empty (Future.wait l1) (Future.wait l2)
	else merge Empty (sort l1) (sort l2)

  val c_sort: t #-> t
  let c_sort l = sort l

  val make: t * int -> t
  let make acc n = 
    if n = 0
    then acc 
    else make (Cons n acc) (n-1)

  val sum: int * t -> int
  let sum acc l = 
    match l with
    | Empty -> acc
    | Cons n rl -> sum (n + acc) rl

  val loop: int * int -> int
  let loop n acc = 
    if n <= 0
    then acc
    else loop (n-1) (acc + sum 0 (sort (make Empty 2000000)))

  val main: unit -> unit
  let main _ = 
    Print.int (loop 1 0)

end
