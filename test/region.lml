
module SharedMap: sig

  type tree('a,'b) = {
      left: Region.ptr(tree('a,'b));
      key: 'a;
      value: 'b;
      right: Region.ptr(tree('a,'b));
    }

  type t('a,'b) = Region.t(tree('a,'b)) ;

  val add: (t('a, 'b), 'a, 'b) -> (t('a,'b), t('a, 'b))
  val find: (Region.t(tree('a,'b)),ptr,'a) -> (Region.t(tree('a,'b)),'b)

end = struct

  let make() = Region.make()

  let rec add(r,t,k,v) = 
    match Region.get(r,t) with
    | None -> r
    | Some t -> add_(r,t,k,v)

  and add_(r,t,k,v) = 
    match t with
    | Leaf -> 
	let cell = {
	  left = Region.null ;
	  key = k ; 
	  value = v ;
	  right = Region.null ;
	} in
	Region.add(r,cell)
    | Node

    

end
