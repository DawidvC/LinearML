
module MyService: sig

  type msg =
    | Init
    | Exit
    | Uniq_id(int)

  type uniq_id_msg = service(msg)

  val unique_id: (int, uniq_id_msg) -> int 
  val main_thread: (service(main_msg), service(uniq_id), unit) -> service(uniq_id)

end = struct

  let unique_id(acc, msg) = 
    match msg with
    | Init -> 0
    | New_id(Msg,res) -> 
	send(res,'Msg(acc)) ; 
	acc+1

  let main_thread(self, uniq_id, msg) = 
    match msg with
    | Init -> 
	let msg = New_id(Nid,self) in
	send(uniq_id, msg) ; 
	uniq_id
    | Nid(n) -> pprint("received: ", n) ; uniq_id
    | Exit -> free(uniq_id) ; exit(0)

  let main () = 
    let make_id = Service.make(unique_id,0) in
    let main_thread = Service.make(main_thread,uniq_id) in
    send(main_thread,Init) 
    
end
