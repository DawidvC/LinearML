
module Fankuch = struct

  module IA = UnsafeIntArray

  val land: int * int #-> int = "land"
  val lsl: int * int #-> int = "lsl"
  val debug: 'a obs #-> unit = "debug"

(** Flip the front [n] pancakes of [a]. *)
  val private flip: int * IA.t * int * int -> IA.t
  let flip n a i iend= 
    if i > iend
    then a
    else begin
      let t = IA.get !a i in
      let k = n - i in
      let ak = (IA.get !a k) in
      a := IA.set a i ak ;
      a := IA.set a k t ; 
      flip n a (i+1) iend
    end

(** Count the number of flips so that pancake 0 is at index 0. *)
  val private count: int * IA.t -> int * IA.t
  let count c ary =
    let z = IA.get !ary 0 in
    if z = 0 then c, ary
    else begin
      let ary = flip z ary 0 (z/2) in
      let c = c + 1 in
      count c ary
    end 

(** Rotate the first [n] pancakes of [a]. *)
  val private rotate: int * IA.t -> IA.t
  let rotate n a =
    let t = IA.get !a 0 in
    let m = n - 1 in
    let a = rotate_loop a 1 m in
    IA.set a m t

  val private rotate_loop: IA.t * int * int -> IA.t
  let rotate_loop a i m =
    if i > m
    then a
    else 
      let ai = IA.get !a i in
      let a = IA.set a (i - 1) ai in
      rotate_loop a (i+1) m

  type env = {
      csum: int ;
      m: int ;
      n: int ;
      num: int ;
      perm: IA.t ;
      copy: IA.t ;
      ht: int ;
    }
       
  val private do_iter: env -> env
  let do_iter env =
    if env.ht = 1 then begin
      let { env ; ~copy } = env in
      let copy = IA.copy env.perm copy env.n in 
      let c, copy = count 0 copy in
      let csum = env.csum + c * (1 - (lsl (land env.num 1) 1)) in
      let m = if c > env.m then c else env.m in
      let env = { env with ~csum ; ~m ; num = env.num + 1 ; ~copy } in
      env
    end else do_iter_loop env 1

  val private do_iter_loop: env * int -> env
  let do_iter_loop env i = 
    if i > env.ht 
    then env
    else
      let env = { env with ht = env.ht - 1 } in
      let { ~perm ; env } = do_iter env in
      let env = { env with ht = env.ht + 1 } in
      let perm = rotate env.ht perm in
      do_iter_loop { env with ~perm } (i+1)

  val private init_perm: IA.t * int -> IA.t
  let init_perm t n = 
    if n < 0
    then t
    else init_perm (IA.set t n n) (n-1)

(** Call [f] on each permutation of [n] numbers in order. *)
  val private iter_perms: int -> env
  let iter_perms n =
    let perm = IA.make n 0 in
    let perm = init_perm perm (n-1) in
    let copy = IA.make n 0 in
    let csum = 0 in 
    let m = 0 in
    let env = {
      csum = csum ;
      m = m ;
      n = n ;
      num = 0 ;
      perm = perm ;
      copy = copy ;
      ht = n ;
    } in
    do_iter env

  val main: unit #-> unit
  let main () =
    let n = 10 in
    let env = iter_perms n in
    Print.int env.csum ;
    Print.newline() ;
    Print.string "Pfannkuchen(" ;
    Print.int env.n ;
    Print.string ") = " ;
    Print.int env.m ;
    let { env ; ~perm ; ~copy } = env in
    IA.release perm ;
    IA.release copy ;
    free env ;
    Print.newline() 
    

end
