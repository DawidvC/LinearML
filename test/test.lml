
module Test:sig

  type t = int32 * int32

  and t2 = 
    | Tata of t
    | Bob of int32

  type 'a list = 
    | Empty
    | Cons of 'a * 'a list

  val fac: int32 -> int32

end = struct

  let rec fac (Cons n) = 
    if n <= 0
    then 0
    else n * fac (n-1)

end

module Bo: sig end = struct 
  module L = Test

  let rec f x = 
    match x with
    | Test.Cons e 
    | Test.Cons e -> e
    
end
