

module List = struct

  type 'a t = 
    | Empty
    | Cons of 'a * 'a t

  type ('a, 'b) rest = 
    | Done
    | Left of 'a
    | Right of 'b

  val rev_map_aux: ('acc * 'a -> 'acc * 'c) * 'acc * 'c t * 'a t -> 'acc * 'c t
  let rec rev_map_aux f acc res l = 
    match l with
    | [] -> acc, res
    | x :: rl -> 
	let acc, x = f acc x in
	rev_map_aux f acc (x :: res) rl

end
