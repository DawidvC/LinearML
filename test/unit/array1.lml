
module TestBasic = struct

  val private test1: int array obs * int -> int
  let test1 t i = t.(i)

  val private test2: int array * int -> int array
  let test2 t i = t.(i) <- 0 ; t

  val private test3: float array obs * int -> float
  let test3 t i = t.(i)

  val private test4: float array * int -> float array
  let test4 t i = t.(i) <- 0.0 ; t

end

module Test = struct

  val private sum_down_loop: int array obs * int * int -> int
  let sum_down_loop t i acc = 
    if i < 0
    then acc
    else (acc := acc + t.(i) ; 
	  sum_down_loop t (i-1) acc)

  val sum_down: int array obs -> int
  let sum_down t = 
    sum_down_loop t (Array.length t - 1) 0

  val private sum_up_loop: int array obs * int * int * int -> int
  let sum_up_loop t size i acc = 
    if i >= size
    then acc
    else (acc := acc + t.(i) ; 
	  sum_up_loop t size (i+1) acc)

  val sum_up: int array obs -> int
  let sum_up t = 
    let size = Array.length t in
    sum_up_loop t size 0 0

  val private swap_loop: 'a array * 'a * int * int -> 'a array * 'a 
  let swap_loop t dumb i j = 
    if i >= j
    then t, dumb
    else 
      let t, ti = Array.swap t i dumb in
      let t, tj = Array.swap t j ti in
      let t, dumb = Array.swap t i tj in
      swap_loop t dumb (i+1) (j-1)

  val swap: 'a array * 'a -> 'a array * 'a
  let swap t x = 
    swap_loop t x 0 (Array.length !t - 1)

  val init: int #-> int
  let init x = x

  val free_int: int #-> unit
  let free_int _ = ()

  val main: unit -> unit
  let main() = 
    let t = Array.make !init 10 in
    Array.release free_int t
end

